name: Main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for comparisons

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -race ./...

      - name: Check go mod
        run: |
          go mod tidy
          if ! git diff --exit-code go.mod go.sum; then
            echo "Error: go.mod or go.sum are not tidy. Run 'go mod tidy' locally and commit changes."
            exit 1
          fi

      - name: Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

      - name: Build
        run: go build -o bin/sa-omf-otelcol ./cmd/sa-omf-otelcol

      - name: Validate configurations
        run: |
          echo "Validating policy files..."
          find . -name "policy.yaml" -o -name "*policy*.yaml" | while read -r file; do
            echo "Checking $file"
            if command -v python3 &>/dev/null; then
              python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null || { echo "Invalid YAML in $file"; exit 1; }
            elif command -v python &>/dev/null; then
              python -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null || { echo "Invalid YAML in $file"; exit 1; }
            else
              echo "Warning: No YAML validation tool found (python). Skipping validation for $file."
            fi
          done
          
          echo "All configuration files validated!"

      - name: Upload build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: binary
          path: bin/sa-omf-otelcol
          retention-days: 7

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/sa-omf-collector:latest
            ghcr.io/${{ github.repository_owner }}/sa-omf-collector:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  agent-validation:
    name: Agent Role Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract role info
        id: role_info
        run: |
          # Handle dependabot PRs automatically
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            echo "role=dependabot" >> $GITHUB_OUTPUT
            echo "is_agent=true" >> $GITHUB_OUTPUT
            echo "tasks=N/A" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract from PR body using simple grep
          PR_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
            | jq -r '.body // ""')
          
          ROLE=$(echo "$PR_BODY" | grep -o '`ROLE: [^`]*`' | sed 's/`ROLE: \(.*\)`/\1/' || echo "")
          TASKS=$(echo "$PR_BODY" | grep -o '`TASKS: [^`]*`' | sed 's/`TASKS: \(.*\)`/\1/' || echo "")
          
          # Set outputs
          echo "role=$ROLE" >> $GITHUB_OUTPUT
          echo "is_agent=$([[ -n "$ROLE" && "$ROLE" != "N/A" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "tasks=$TASKS" >> $GITHUB_OUTPUT
          
          echo "PR role: '$ROLE', is_agent: $([[ -n "$ROLE" && "$ROLE" != "N/A" ]] && echo "true" || echo "false"), tasks: '$TASKS'"

      - name: Check file permissions
        if: steps.role_info.outputs.is_agent == 'true' && steps.role_info.outputs.role != 'dependabot'
        run: |
          ROLE="${{ steps.role_info.outputs.role }}"
          ROLE_FILE="docs/agents/$ROLE.yaml"
          
          # Check if role exists
          if [ ! -f "$ROLE_FILE" ]; then
            echo "Error: Role '$ROLE' not found in docs/agents/ directory"
            echo "Available roles: $(ls docs/agents/ | grep '.yaml' | sed 's/\.yaml//')"
            exit 1
          fi
          
          # Simple file permission checks without yq
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          echo "Changed files: $CHANGED_FILES"
          
          # Read permissions from role file
          ALLOWED_PATTERNS=$(grep "can_touch:" -A 100 "$ROLE_FILE" | grep -v "can_touch:" | grep "^  -" | sed 's/^  - //' | sed 's/"//g')
          BLOCKED_PATTERNS=$(grep "blocked_files:" -A 100 "$ROLE_FILE" | grep -v "blocked_files:" | grep "^  -" | sed 's/^  - //' | sed 's/"//g')
          
          echo "Allowed patterns: $ALLOWED_PATTERNS"
          echo "Blocked patterns: $BLOCKED_PATTERNS"
          
          # Check files against permissions
          for file in $CHANGED_FILES; do
            # Check blocked patterns
            for pattern in $BLOCKED_PATTERNS; do
              if [[ -n "$pattern" && "$file" == $pattern ]]; then
                echo "Error: '$file' cannot be modified by role '$ROLE'"
                exit 1
              fi
            done
            
            # Check allowed patterns
            ALLOWED=false
            for pattern in $ALLOWED_PATTERNS; do
              if [[ -n "$pattern" && "$file" == $pattern ]]; then
                ALLOWED=true
                break
              fi
            done
            
            if [ "$ALLOWED" = false ]; then
              echo "Error: '$file' is not allowed to be modified by role '$ROLE'"
              exit 1
            fi
          done
          
          echo "All file changes comply with role '$ROLE' permissions"