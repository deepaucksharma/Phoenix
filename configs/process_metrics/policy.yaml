global_settings:
  autonomy_level: shadow  # Start in shadow mode for safety
  collector_cpu_safety_limit_mcores: 400
  collector_rss_safety_limit_mib: 350
  new_relic_api_key_env_var: NEW_RELIC_API_KEY  # Environment variable for New Relic API key

processors_config:
  # Unified metric_pipeline processor configuration specifically for process metrics
  metric_pipeline:
    resource_filter:
      enabled: true
      filter_strategy: hybrid
      priority_attribute: "aemf.process.priority"
      # Priority rules tailored for process filtering
      priority_rules:
        - match: "process.executable.name=~/java|javaw/"
          priority: high
        - match: "process.executable.name=~/nginx|httpd|apache2/"
          priority: high
        - match: "process.executable.name=~/mysql|postgres|mongod|redis-server|elasticsearch/"
          priority: critical
        - match: "process.executable.name=~/python|python3|node|dotnet|ruby/"
          priority: medium
        - match: "process.executable.name=~/otelcol|sa-omf-otelcol|collector/"
          priority: critical
        - match: "process.executable.name=~/newrelic-infra|nri-.*/"
          priority: critical
        # Default rule for any other process
        - match: ".*"
          priority: low
      
      topk:
        k_value: 25  # Increased default from 20 to 25 for better coverage
        k_min: 10
        k_max: 50    # Higher max value to allow more flexibility
        resource_field: "process.executable.name"
        counter_field: "process.cpu.time"  # Use CPU time specifically for process metrics
        coverage_target: 0.95
      
      rollup:
        enabled: true
        priority_threshold: "low"
        strategy: "sum"
        name_prefix: "phoenix.others.process"  # Distinct prefix for rolled up process metrics
    
    # Transformation configuration for process metrics
    transformation:
      # CPU histogram generation for better visualization in New Relic
      histograms:
        enabled: true
        max_buckets: 10
        metrics:
          process.cpu.time:
            boundaries: [0.01, 0.05, 0.1, 0.5, 1.0, 5.0, 10.0, 30.0]
          process.memory.rss:
            boundaries: [1048576, 10485760, 104857600, 524288000, 1073741824, 2147483648]  # 1MB, 10MB, 100MB, 500MB, 1GB, 2GB
      
      # Attribute processing to ensure compatibility with New Relic
      attributes:
        actions:
          # Remove high-cardinality attributes that would impact NRDB
          - key: "process.pid"
            action: "delete"
          - key: "process.command_line"
            action: "delete"
          - key: "process.command"
            action: "delete"
          - key: "process.executable.path"
            action: "delete"
          
          # Conditionally remove container.id to reduce cardinality
          - key: "container.id"
            action: "delete"
          
          # Add New Relic specific attributes for better querying
          - key: "collector.name"
            action: "insert"
            value: "SA-OMF"
          - key: "service.name"
            action: "insert"
            value: "phoenix-process-metrics"
          - key: "instrumentation.provider"
          action: "insert"
          value: "phoenix"

  timeseries_estimator:
    enabled: true
    estimator_type: "exact"
    max_unique_time_series: 5000

# Adaptive PID controller configuration for process metrics monitoring
adaptive_pid_config:
  controllers:
    # Controller for coverage management
    - name: coverage_controller
      enabled: true
      kpi_metric_name: aemf_impact_resource_filter_coverage_percent_avg_1m
      kpi_target_value: 0.95  # Target 95% coverage
      
      # Streamlined PID parameters optimized for process metrics
      pid:
        kp: 15  # Reduced proportional gain for smoother response
        ki: 2   # Lower integral gain to prevent overshoot
        kd: 0.3 # Lower derivative gain
        hysteresis_percent: 5
        integral_limit: 80
        anti_windup_enabled: true
        oscillation_detection_enabled: true
      
      # Output configuration targeting the metric_pipeline
      output_config_patches:
        - target_processor_name: metric_pipeline
          parameter_path: resource_filter.topk.k_value
          change_scale_factor: -15.0
          min_value: 10
          max_value: 50  # Same as configured maximum
    
    # Controller for cardinality management - critical for New Relic data volume
    - name: cardinality_governor_controller
      enabled: true
      kpi_metric_name: aemf_phoenix_estimated_output_active_timeseries
      kpi_target_value: 3000  # Target timeseries budget specifically for New Relic
      
      # Streamlined PID parameters
      pid:
        kp: 20   # Higher P gain for faster response to cardinality issues
        ki: 3
        kd: 0.5
        hysteresis_percent: 10
        integral_limit: 50
        anti_windup_enabled: true
        oscillation_detection_enabled: true
      
      # Multi-faceted output configuration to control cardinality from multiple angles
      output_config_patches:
        # Primary control: adjust k-value down when cardinality is too high
        - target_processor_name: metric_pipeline
          parameter_path: resource_filter.topk.k_value
          change_scale_factor: -1.0  # Negative scale to reduce k when cardinality is too high
          min_value: 10
          max_value: 50
        
        # Secondary control: adjust rollup threshold to be more aggressive
        - target_processor_name: metric_pipeline
          parameter_path: resource_filter.rollup.priority_threshold
          value_map:
            -10.0: "low"      # When cardinality is too low, rollup only low priority
             0.0: "medium"    # At target, rollup low and medium priority
            10.0: "high"      # When cardinality is too high, rollup everything except critical

# Safety mode configurations
safety_config:
  # Process metrics specific safety settings
  safe_mode_processor_configs:
    metric_pipeline:
      resource_filter:
        topk:
          k_value: 8  # Aggressive k-value reduction in safe mode
        rollup:
          priority_threshold: "high"  # Only preserve critical processes in safe mode
      transformation:
        histograms:
          enabled: false  # Disable histograms entirely in safe mode to reduce overhead
        attributes:
          actions:
            # Additional aggressive attribute removal in safe mode
            - key: "process.owner"
              action: "delete"
  
  # New Relic export safety settings
  otlp_safety_settings:
    max_exported_metrics_per_minute: 3000  # More conservative limit for New Relic
    max_cardinality: 500  # Lower cardinality threshold for safe mode
    backpressure_enabled: true
    export_interval_seconds: 30  # Increase export interval in safe mode
    compression_level: 6  # Higher compression to reduce bandwidth in safe mode