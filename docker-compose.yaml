# Phoenix-vNext Base Docker Compose Configuration
# This file contains the core services for all environments

services:
  # Main OpenTelemetry Collector - Core service
  otelcol-main:
    image: otel/opentelemetry-collector-contrib:0.103.1
    container_name: phoenix-collector-main
    command: ["--config=/etc/otelcol/config.yaml"]
    pid: host
    env_file: .env
    environment:
      GOMAXPROCS: ${OTELCOL_MAIN_GOMAXPROCS:-2}
      GOMEMLIMIT: ${OTELCOL_MAIN_MEMORY_LIMIT_MIB:-1024MiB}
    volumes:
      - ./configs/otel/collectors/main.yaml:/etc/otelcol/config.yaml:ro
      - ./configs/control:/etc/otelcol/control:ro
      - /proc:/hostfs/proc:ro
      - /sys:/hostfs/sys:ro
      - /etc/hostname:/hostfs/etc/hostname:ro
      - ./data/otelcol_main:/var/lib/otelcol/file_storage
    ports:
      - "4317:4317"   # OTLP/gRPC
      - "4318:4318"   # OTLP/HTTP
      - "8888:8888"   # Full pipeline metrics
      - "8889:8889"   # Optimized pipeline metrics
      - "8890:8890"   # Experimental pipeline metrics
      - "13133:13133" # Health check
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133"]
      interval: 20s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: ${OTELCOL_MAIN_MEMORY_LIMIT_MIB:-1024}MiB
    networks:
      - phoenix

  # Observer Collector - Monitoring and KPIs
  otelcol-observer:
    image: otel/opentelemetry-collector-contrib:0.103.1
    container_name: phoenix-collector-observer
    command: ["--config=/etc/otelcol/config.yaml"]
    env_file: .env
    environment:
      GOMAXPROCS: ${OTELCOL_OBSERVER_GOMAXPROCS:-1}
      GOMEMLIMIT: ${OTELCOL_OBSERVER_MEMORY_LIMIT_MIB:-256MiB}
    volumes:
      - ./configs/otel/collectors/observer.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "9888:9888"   # Observer metrics
      - "13134:13133" # Health check (remapped)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133"]
      interval: 20s
      timeout: 5s
      retries: 3
    networks:
      - phoenix

  # Control Actuator - Go-based PID controller
  control-actuator-go:
    build:
      context: ./apps/control-actuator-go
      dockerfile: Dockerfile
    container_name: phoenix-control-actuator
    env_file: .env
    environment:
      - OBSERVER_ENDPOINT=http://otelcol-observer:9888
      - CONTROL_FILE_PATH=/configs/control/optimization_mode.yaml
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./configs/control:/configs/control
    ports:
      - "8081:8081"   # Control API
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      otelcol-observer:
        condition: service_healthy
    networks:
      - phoenix

  # Anomaly Detector - Multi-algorithm detection
  anomaly-detector:
    build:
      context: ./apps/anomaly-detector
      dockerfile: Dockerfile
    container_name: phoenix-anomaly-detector
    env_file: .env
    environment:
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
      - WEBHOOK_ENDPOINT=http://control-actuator-go:8081/anomaly
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "8082:8082"   # Anomaly API
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - phoenix

  # Benchmark Controller - Performance validation
  benchmark-controller:
    build:
      context: ./services/benchmark
      dockerfile: Dockerfile
    container_name: phoenix-benchmark
    env_file: .env
    environment:
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
      - COLLECTOR_ENDPOINT=http://otelcol-main:4318
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "8083:8083"   # Benchmark API
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      otelcol-main:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    networks:
      - phoenix

  # Prometheus - Metrics storage and querying
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: phoenix-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./configs/monitoring/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
      - ./configs/monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - phoenix

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.1.1
    container_name: phoenix-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./configs/monitoring/grafana/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./configs/monitoring/grafana/dashboards_provider.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml:ro
      - ./configs/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - phoenix

  # Synthetic Metrics Generator - Load generation
  synthetic-metrics-generator:
    build:
      context: ./services/generators/synthetic
      dockerfile: Dockerfile
    container_name: phoenix-generator-synthetic
    env_file: .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol-main:4318
      - SYNTHETIC_PROCESS_COUNT_PER_HOST=${SYNTHETIC_PROCESS_COUNT_PER_HOST:-250}
      - SYNTHETIC_HOST_COUNT=${SYNTHETIC_HOST_COUNT:-3}
      - SYNTHETIC_METRIC_EMIT_INTERVAL_S=${SYNTHETIC_METRIC_EMIT_INTERVAL_S:-15}
    restart: unless-stopped
    depends_on:
      otelcol-main:
        condition: service_healthy
    networks:
      - phoenix
    profiles:
      - generators

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  phoenix:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16