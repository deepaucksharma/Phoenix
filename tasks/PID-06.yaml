id: PID-06
title: "Implement Controller Disabled/Enabled via Policy Test"
state: open
priority: medium
created_at: "2025-05-20"
assigned_to: "tester"
area: "test/e2e/pid"
depends_on: []
acceptance:
  - "Test hot-reloads policy to disable a specific PID controller, then re-enable it"
  - "Disabled controller generates no patches"
  - "Re-enabled controller resumes normal operation"
  - "aemf_pid_controller_active gauge accurately reflects state"
  - "System stability is maintained during transitions"
  - "Other enabled controllers continue to operate normally"
description: |
  The policy file allows enabling and disabling individual PID controllers.
  This test verifies that controllers can be dynamically disabled and
  re-enabled through policy updates without affecting system stability.
  
  The test should:
  
  1. Start the collector with multiple PID controllers enabled
  2. Verify all controllers are active and generating patches
  3. Hot-reload policy.yaml to disable a specific controller:
     ```yaml
     controllers:
       - name: "coverage_controller"
         enabled: false  # Disable this controller
         kpi_metric_name: "aemf_impact_adaptive_topk_resource_coverage_percent_avg_1m"
         # ...
       - name: "cardinality_controller"
         enabled: true   # This one remains enabled
         # ...
     ```
  4. Verify disabled controller behavior:
     - No new patches generated from this controller
     - aemf_pid_controller_active gauge shows 0 for this controller
     - Target processor parameter stops adapting to this KPI
  5. Verify enabled controllers continue normal operation
  6. Hot-reload policy to re-enable the controller
  7. Verify re-enabled controller behavior:
     - Controller resumes generating patches
     - aemf_pid_controller_active gauge shows 1
     - Target processor parameter begins adapting again
  
  This test is important for operational scenarios where administrators
  need to temporarily disable specific adaptation mechanisms while keeping
  others active.
  
  Implementation should verify both immediate effects (patch generation stops)
  and longer-term effects (parameter stabilizes at last value). It should
  also test rapid enable/disable cycles to ensure stability.