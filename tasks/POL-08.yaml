id: POL-08
title: "Implement Safe Mode Policy Application Test"
state: open
priority: medium
created_at: "2025-05-20"
assigned_to: "tester"
area: "test/e2e/policy"
depends_on: []
acceptance:
  - "Test triggers safe mode through a defined mechanism"
  - "pic_control applies safe_mode_processor_configs from policy.yaml"
  - "aemf_anom_safe_mode_active metric shows value 1"
  - "Target processors reconfigure to safe values"
  - "Normal patch application is suspended during safe mode"
  - "System recovers to normal operation when safe mode exits"
description: |
  The safe mode feature protects the system during extreme conditions by
  applying conservative processor configurations. This test verifies that
  the safe mode activation works correctly and applies the defined safe
  configurations.
  
  The test should:
  
  1. Configure a policy.yaml with safe mode configurations:
     ```yaml
     safe_mode:
       triggers:
         - high_cpu_utilization: 0.9
         - high_memory_utilization: 0.85
       processor_configs:
         - target: adaptive_topk
           parameters:
             k_value: 5  # Minimal value to reduce resource usage
         - target: cardinality_guardian
           parameters:
             max_cardinality: 500  # Very restrictive
     ```
  2. Configure a mechanism to trigger safe mode:
     - Force high CPU usage
     - Simulate memory pressure
     - Call the safe mode API directly
  3. Verify safe mode activation:
     - aemf_anom_safe_mode_active metric shows value 1
     - Log messages indicate safe mode activation
     - Processors reconfigure to safe values defined in policy
  4. Verify system behavior during safe mode:
     - Normal patch generation continues but isn't applied
     - Data pipeline continues to function with safe configurations
     - Real-time monitoring shows reduced resource usage
  5. Trigger safe mode exit and verify recovery:
     - System returns to normal operation
     - Processors resume adaptive behavior
     - aemf_anom_safe_mode_active metric returns to 0
  
  This test is critical for ensuring the system's self-protection mechanisms
  function correctly during resource-constrained conditions.
  
  Implementation should include both controlled tests (API-triggered safe mode)
  and realistic scenario tests (actual resource pressure). The test should
  verify all processors listed in safe_mode.processor_configs are reconfigured.