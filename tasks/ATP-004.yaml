id: ATP-004
title: "Implement metrics emission in Adaptive TopK processor"
state: open
priority: low
created_at: "2025-05-20"
assigned_to: "implementer"
area: internal/processor/adaptive_topk
depends_on: []
acceptance:
  - "Processor emits metrics for coverage, k-value, and item counts"
  - "Metrics use standard OpenTelemetry format"
  - "Metrics are documented in comments and README"
  - "Metrics collection has minimal performance impact"
  - "Tests verify metric emission"
description: |
  The Adaptive TopK processor has commented-out metrics code (processor.go:92-94),
  limiting observability of its behavior. This task requires implementing proper
  metrics emission for monitoring the processor's performance and behavior.
  
  The metrics to implement include:
  
  1. Coverage metrics:
     - Current coverage percentage
     - Target coverage percentage
     - Coverage delta (current - target)
  
  2. K-value metrics:
     - Current k-value
     - Min/max k-value bounds
     - K-value changes over time
  
  3. Item count metrics:
     - Total items seen
     - Items included in top-k
     - Items excluded from top-k
     - Inclusion ratio (included/total)
  
  4. Performance metrics:
     - Processing time
     - Memory usage estimates
  
  Current commented-out code:
  ```go
  // Update coverage metrics
  coverage := p.calculateCoverage()
  metricsEmitter := p.GetMetricsEmitter()
  if metricsEmitter != nil {
      // Would record coverage metric here
  }
  ```
  
  The implementation should:
  1. Use the OpenTelemetry metrics API
  2. Follow the project's metric naming conventions
  3. Include appropriate attributes for filtering/grouping
  4. Support proper aggregation for monitoring
  5. Be documented for users who want to set up alerts or dashboards
  
  The metrics should be implemented in a way that minimizes performance impact,
  particularly for high-throughput scenarios. The implementation should also
  consider adding histogram metrics for monitoring the distribution of values
  over time.
