id: PIPE-07
title: "Implement Multiple PID Decider Instances Test"
state: open
priority: medium
created_at: "2025-05-20"
assigned_to: "tester"
area: "test/e2e/pipelines"
depends_on: []
acceptance:
  - "Test configures multiple pid_decider instances in the control pipeline"
  - "Each PID controller makes decisions independently"
  - "Patches are correctly routed to their target processors"
  - "No cross-talk or interference between pid_decider instances"
  - "All PID controllers maintain their individual KPI targets"
  - "System remains stable with multiple control loops active"
description: |
  The SA-OMF architecture supports multiple pid_decider instances in the control
  pipeline, each targeting different processors or KPIs. This test verifies that
  these instances can operate independently without interference, allowing for
  complex control topologies.
  
  The test should:
  
  1. Configure a collector with multiple pid_decider instances:
     - One targeting adaptive_topk processor (k_value parameter)
     - One targeting cardinality_guardian processor (cardinality_limit parameter)
     - One targeting reservoir_sampler processor (sample_rate parameter)
  2. Set different KPI targets for each controller:
     - Coverage target for adaptive_topk
     - Cardinality reduction target for cardinality_guardian
     - Sampling accuracy target for reservoir_sampler
  3. Run the system under varying load conditions
  4. Verify each controller's behavior:
     - Controllers make independent decisions
     - Patches are correctly routed to their target processors
     - No cross-talk or interference between controllers
     - Each controller maintains its target KPI value
  5. Introduce perturbations to test coordinated response:
     - Rapid increase in data volume
     - Change in data distribution
     - Processor restarts
  
  This test validates the control architecture's ability to manage multiple
  adaptation concerns simultaneously, which is essential for complex
  observability systems.
  
  Implementation should include both unit tests for the controller routing
  logic and end-to-end tests with actual metric flows and adaptation.