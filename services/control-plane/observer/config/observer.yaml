# Phoenix Enhanced Observer - With Cardinality Explosion Detection
# Based on original observer.yaml with additional processors for risk detection

receivers:
  # Original pipeline KPI receivers
  prometheus/main_pipeline_kpis:
    config:
      scrape_configs:
        - job_name: 'otelcol-main-full-output-kpis'
          scrape_interval: 15s
          static_configs: [{targets: ['otelcol-main:8888']}]
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '^phoenix_full_final_output_.*'
              action: keep
            - target_label: "phoenix_pipeline_label"
              replacement: "full_fidelity"
            - source_labels: [__name__]
              regex: 'phoenix_full_final_output_(.*)'
              replacement: 'phoenix_pipeline_output_cardinality_estimate'
              target_label: "__name__"

        - job_name: 'otelcol-main-opt-output-kpis'
          scrape_interval: 15s
          static_configs: [{targets: ['otelcol-main:8889']}]
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '^phoenix_opt_final_output_.*'
              action: keep
            - target_label: "phoenix_pipeline_label"
              replacement: "optimised"
            - source_labels: [__name__]
              regex: 'phoenix_opt_final_output_(.*)'
              replacement: 'phoenix_pipeline_output_cardinality_estimate'
              target_label: "__name__"

        - job_name: 'otelcol-main-exp-output-kpis'
          scrape_interval: 15s
          static_configs: [{targets: ['otelcol-main:8890']}]
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '^phoenix_exp_final_output_.*'
              action: keep
            - target_label: "phoenix_pipeline_label"
              replacement: "experimental"
            - source_labels: [__name__]
              regex: 'phoenix_exp_final_output_(.*)'
              replacement: 'phoenix_pipeline_output_cardinality_estimate'
              target_label: "__name__"

        # Cardinality Observatory metrics
        - job_name: 'otelcol-main-observatory'
          scrape_interval: 15s
          static_configs: [{targets: ['otelcol-main:8891']}]
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '^phoenix_observatory_.*'
              action: keep

processors:
  # Add labels to identify observer
  attributes/observer:
    actions:
      - key: observer_instance
        value: "phoenix-observer"
        action: insert

  # Transform metrics for explosion detection
  transform/cardinality_explosion:
    metric_statements:
      # Calculate cardinality growth rate
      - context: metric
        statements:
          - set(name, "phoenix_cardinality_growth_rate") where name == "phoenix_pipeline_output_cardinality_estimate"
          - set(unit, "series_per_second")
          
      # Detect explosion based on absolute values
      - context: datapoint
        statements:
          - set(attributes["explosion_detected"], "true") where value > 1000000
          - set(attributes["risk_level"], "critical") where value > 1000000
          - set(attributes["risk_level"], "high") where value > 500000 and value <= 1000000
          - set(attributes["risk_level"], "medium") where value > 250000 and value <= 500000
          - set(attributes["risk_level"], "low") where value <= 250000

  # Filter to create explosion alert metrics
  filter/explosion_alerts:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - "phoenix_.*"
      datapoint:
        - 'attributes["explosion_detected"] == "true"'

  # Create composite risk score
  metricstransform/risk_score:
    transforms:
      - include: phoenix_pipeline_output_cardinality_estimate
        match_type: strict
        action: insert
        new_name: phoenix_cardinality_risk_score
        operations:
          - action: add_label
            new_label: risk_type
            new_value: cardinality

  # Memory limiter to prevent observer from consuming too much memory
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  # Batch processor for efficiency
  batch:
    timeout: 10s
    send_batch_size: 8192

exporters:
  # Enhanced Prometheus exporter with explosion metrics
  prometheus/kpi_store:
    endpoint: "0.0.0.0:9888"
    namespace: "phoenix_observer_kpi_store"
    const_labels:
      deployment: "phoenix_v3_ultimate"
      component: "observer"
    resource_to_telemetry_conversion:
      enabled: true
    enable_open_metrics: true

  # Debug exporter for troubleshooting
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

service:
  pipelines:
    # Main KPI pipeline
    metrics/kpis:
      receivers: [prometheus/main_pipeline_kpis]
      processors: 
        - memory_limiter
        - attributes/observer
        - transform/cardinality_explosion
        - metricstransform/risk_score
        - batch
      exporters: [prometheus/kpi_store]
    
    # Explosion detection pipeline
    metrics/explosions:
      receivers: [prometheus/main_pipeline_kpis]
      processors:
        - memory_limiter
        - transform/cardinality_explosion
        - filter/explosion_alerts
        - batch
      exporters: [prometheus/kpi_store, debug]

  telemetry:
    logs:
      level: info
      output_paths: ["stdout"]
      error_output_paths: ["stderr"]
    metrics:
      level: detailed
      address: 0.0.0.0:8889
    traces:
      level: detailed

  extensions: [health_check, pprof, zpages]

extensions:
  health_check:
    endpoint: 0.0.0.0:13134
    path: "/health"
  pprof:
    endpoint: 0.0.0.0:1778
  zpages:
    endpoint: 0.0.0.0:55680